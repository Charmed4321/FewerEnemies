/*using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;

namespace FewerEnemies
{
    public class Program
    {
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "YourPatcher.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            //Your code here!
        }
    }
}
*/

using Mutagen.Bethesda;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using System;
using System.Threading.Tasks;

namespace FewerEnemies
{
    public class Program
    {
        private static Lazy<Settings> _lazySettings = null!;
        private static Settings Settings => _lazySettings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "FewerEnemies.esp")
                .SetAutogeneratedSettings("Settings", "settings.json", out _lazySettings)
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            int count = 0; // running change counter
            bool skip = false;

            // iterate through all winning override npc records
           /* foreach (var npc in state.LoadOrder.PriorityOrder.Npc().WinningOverrides())
            {
                try // catch & enrich exceptions
                {
                    if (npc == null || npc.EditorID == null || (Settings.SkipPlayer && npc.EditorID.Equals("player", StringComparison.OrdinalIgnoreCase)))
                        continue;

                    var copy = Settings.ApplyTo(npc.DeepCopy(), out var changes);

                    if (changes > 0)
                    {
                        state.PatchMod.Npcs.Set(copy);
                        Console.WriteLine($"[{++count}]\tChanged {changes} level value{(changes > 1 ? "s" : "")} in {npc.EditorID}");
                    }
                }
                catch (Exception ex)
                {
                    throw RecordException.Enrich(ex, npc);
                }
            }*/

            // iterate through all leveled list entries
            foreach (var list in state.LoadOrder.PriorityOrder.LeveledNpc().WinningOverrides())
            {
                try // catch & enrich exceptions
                {
                    skip = false;
                    foreach(string Name in Settings.NameBlacklist)
                    {
                        if (list.EditorID?.Contains(Name, StringComparison.OrdinalIgnoreCase) ?? true)
                            skip = true;
                    }

                    if (skip)
                        continue;
                    // TODO: settings-based blacklist instead.
                    // Don't apply to the Boss lists. Good chance some mods don't obey this syntax...
                    /*if (list.EditorID?.Contains("Boss", StringComparison.OrdinalIgnoreCase) ?? true)
                        continue;

                    // No dragon priests...
                    if (list.EditorID?.Contains("Priest", StringComparison.OrdinalIgnoreCase) ?? true)
                        continue;

                    // No dragons...
                    if (list.EditorID?.Contains("Dragon", StringComparison.OrdinalIgnoreCase) ?? true)
                        continue;

                    // No hagravens...
                    if (list.EditorID?.Contains("Hagraven", StringComparison.OrdinalIgnoreCase) ?? true)
                        continue;

                    // No corpses...
                    if (list.EditorID?.Contains("Corpse", StringComparison.OrdinalIgnoreCase) ?? true)
                        continue;

                    // Missives targets
                    if (list.EditorID?.Contains("_M_", StringComparison.OrdinalIgnoreCase) ?? true)
                        continue;

                    // Ambushers
                    if (list.EditorID?.Contains("Ambush", StringComparison.OrdinalIgnoreCase) ?? true)
                        continue;

                    // Guards
                    if (list.EditorID?.Contains("Guard", StringComparison.OrdinalIgnoreCase) ?? true)
                        continue;

                    // Stendarr
                    if (list.EditorID?.Contains("Vigilant", StringComparison.OrdinalIgnoreCase) ?? true)
                        continue;

                    // Stendarr
                    if (list.EditorID?.Contains("Stendarr", StringComparison.OrdinalIgnoreCase) ?? true)
                        continue;

                    // Stendarr
                    if (list.EditorID?.Contains("Child", StringComparison.OrdinalIgnoreCase) ?? true)
                        continue;


                    */


                    if (list == null || list.EditorID == null || list.Entries == null)
                        continue;

                    var copy = Settings.ApplyTo(list.DeepCopy(), out var changes, chanceNone: Settings.GetChanceNone());

                    if (changes > 0)
                    {
                        state.PatchMod.LeveledNpcs.Set(copy);
                        Console.WriteLine($"[{++count}]\tModified {changes} entr{(changes > 1 ? "ies" : "y")} in {list.EditorID}");
                    }
                }
                catch (Exception ex)
                {
                    throw RecordException.Enrich(ex, list);
                }
            }

            Console.WriteLine($"Process completed. Modified {count} records.");
        }
    }
}